#include <iostream>
using namespace std;

int main()
{
//	4.동적 배열과 포인터
	////< 포인터의 개념 >
	//int n = 3;//원래 선언
	//	//int* p;//포인터변수를 만들었다. 메모리 주소를 가진 변수. 주소를 저장한다.
	//	//&n //이미 선언된 변수앞에 앤을 쓰면 변수의 주소값을 나타낸다.
	//int* p = &n;
	//	//p에는 n의 주소값이 들어간다.
	//cout << p << endl; //124125245
	//	//변수이름만 접근하면 p에 담긴 주소값 ->n이 차지하고 있는 주소값.
	//cout << *p << endl;	// 3출력
	// //* p가 가리키고 있는 변수의 값을 출력한다.
	//////////////////////////////////////////////////////////////////
	////읽는방법 : *p => 포인터네 주소값이 들어있겠네, 어딜가리키고 있는지 봐야한다.
	////  n =기본적으로 주소값출력 그럼 주소값이 나오겠구나.
	////  &n = 그럼 가리키고 있는 변수를 출력하겠구나
	//int n =3;
	//int*p = &n;
	//n = 10;
	//cout << p << endl;   //=>141524124 : n의 주소값은 바뀌지 않았다.
	//cout << *p << endl;  //=>10 n의 변수값은 바뀌었다.
	/////////////////////////////////////////////////////////////////////
	////string도 똑같다.
	//string str = "aaa";
	//string* str_ = &str;
	//cout << str_ << endl;
	//cout << *str_ << endl;
	////////////////////////////////////////////////////////////////////
	////< 참조변수에 대한 설명 >
		//int n = 3;
		//int& num = n;  //선언할때 num : 참조변수 : 별명을 붙인다.
		////num, n = > 모두 n이다.
		//cout << n << endl; //3
		//cout << &n << endl; //000000124124 주소값
		//cout << num << endl; //3
		//cout << &num << endl;//000000124124 주소값	
	//////////////////////////////////////////////////////////
		//int n = 3;
		//int& num = n;
		//cout << n << endl; //3
		//cout << num << endl; //3
		//num = 5;
		//cout << n << endl; //5
		//cout << num << endl; //5 num과 n은 같은 것을 가리킨다.
//////////////////////////////////////////////////////////////
// < 포인터를 이용한 동적메모리 할당 >
		//포인터(int *p = n) : 메모리 주소를 저장하는 변수
		//포인터를 이용하면 동적 메모리를 생성할 수 있다.
		//포인터 전에 배운 변수 및 배열 ->모두 정적 메모리(int n;, int arr[3])
		//스택 영역 : 정적 메모리가 저장됨
	//****힙 영역 : 동적 메모리가 저장됨.(할당과 해제를 직접 관리해 줘야함) : new!!!
		//int n = 3;	int* p = &n; = > 정적메모리
		//int* p = new int;(할당) ->  delete p;(해제) => 동적메모리
		//int num;	 cin >> num;   int arr[num] (하고싶지만 정적메모리라 안된다)
	//****int num; cin >> num; int* arr = new int[num]; (동적메모리 문법)
		//delete[] arr; 할당했으면 마지막에 해제 해줘야한다 


////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
	//동적메모리 예시****
		//cout << "크기를 입력하세요.";
		//int num;
		//cin >> num; // 5
		//int* arr = new int[num];  // 1 2 3 4 5---------1차원 배열
		//for (int i = 0; i < num; i++){
		//	arr[i] =i + 1;
		//}
		//for (int i = 0; i < num; i++) {
		//	cout << arr[i]<<" ";//5를 입력할 경우 1 2 3 4 5
		//}
		//delete[] arr;

/////////////////////////////////////////////////////////////
////2차원 배열 동적 메모리 예시 (알고리즘 분야에서 사용 됨.)
	//num * num 행렬
	cout << "크기를 입력하세요.";
	int num_2D;
	cin >> num_2D;
	//int* arr = new int[num];//-------1차원 배열
	//{ {int}, {int}, {int} }
	int** arr_2D = new int* [num_2D];//-----2차원 배열
	//{ { ?,? }, { ?,? }, { ?,? } }
	for (int i = 0; i < num_2D; i++) {
		arr_2D[i] = new int[num_2D];//num=3일때
		//{ { , , }, { , , }, { , , } }
	}
	for (int i = 0; i < num_2D; i++) {
		for (int j = 0; j < num_2D; j++) {
			arr_2D[i][j] = 1;
		}
		cout << endl;
	}
	for (int i = 0; i < num_2D; i++) {
		for (int j = 0; j < num_2D; j++) {
			cout << arr_2D[i][j] << " ";
		}
		cout << endl;
	}
	for (int i = 0; i < num_2D; i++)
	{
		delete[] arr_2D[i];//{ , , , , }만남음
	}
	delete[] arr_2D;//{  }만남음
}


